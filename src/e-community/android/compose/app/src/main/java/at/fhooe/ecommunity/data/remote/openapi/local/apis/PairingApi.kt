/**
 * e-community-local
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package at.fhooe.ecommunity.data.remote.openapi.local.apis

import java.io.IOException

import at.fhooe.ecommunity.data.remote.openapi.local.models.CloudConnectModel
import at.fhooe.ecommunity.data.remote.openapi.local.models.ErrorDto
import at.fhooe.ecommunity.data.remote.openapi.local.models.NetworkConnectModel
import at.fhooe.ecommunity.data.remote.openapi.local.models.NetworkDiscoveryDto
import at.fhooe.ecommunity.data.remote.openapi.local.models.OkDto
import at.fhooe.ecommunity.data.remote.openapi.local.models.StatusDto

import com.squareup.moshi.Json

import at.fhooe.ecommunity.data.remote.openapi.local.infrastructure.ApiClient
import at.fhooe.ecommunity.data.remote.openapi.local.infrastructure.ApiResponse
import at.fhooe.ecommunity.data.remote.openapi.local.infrastructure.ClientException
import at.fhooe.ecommunity.data.remote.openapi.local.infrastructure.ClientError
import at.fhooe.ecommunity.data.remote.openapi.local.infrastructure.ServerException
import at.fhooe.ecommunity.data.remote.openapi.local.infrastructure.ServerError
import at.fhooe.ecommunity.data.remote.openapi.local.infrastructure.MultiValueMap
import at.fhooe.ecommunity.data.remote.openapi.local.infrastructure.RequestConfig
import at.fhooe.ecommunity.data.remote.openapi.local.infrastructure.RequestMethod
import at.fhooe.ecommunity.data.remote.openapi.local.infrastructure.ResponseType
import at.fhooe.ecommunity.data.remote.openapi.local.infrastructure.Success
import at.fhooe.ecommunity.data.remote.openapi.local.infrastructure.toMultiValue

class PairingApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param cloudConnectModel  (optional)
    * @return OkDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pairingCloudConnectPost(cloudConnectModel: CloudConnectModel?) : OkDto {
        val localVarResponse = pairingCloudConnectPostWithHttpInfo(cloudConnectModel = cloudConnectModel)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OkDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param cloudConnectModel  (optional)
    * @return ApiResponse<OkDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun pairingCloudConnectPostWithHttpInfo(cloudConnectModel: CloudConnectModel?) : ApiResponse<OkDto?> {
        val localVariableConfig = pairingCloudConnectPostRequestConfig(cloudConnectModel = cloudConnectModel)

        return request<CloudConnectModel, OkDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pairingCloudConnectPost
    *
    * @param cloudConnectModel  (optional)
    * @return RequestConfig
    */
    fun pairingCloudConnectPostRequestConfig(cloudConnectModel: CloudConnectModel?) : RequestConfig<CloudConnectModel> {
        val localVariableBody = cloudConnectModel
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/Pairing/CloudConnect",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param networkConnectModel  (optional)
    * @return OkDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pairingNetworkAddPost(networkConnectModel: NetworkConnectModel?) : OkDto {
        val localVarResponse = pairingNetworkAddPostWithHttpInfo(networkConnectModel = networkConnectModel)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OkDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param networkConnectModel  (optional)
    * @return ApiResponse<OkDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun pairingNetworkAddPostWithHttpInfo(networkConnectModel: NetworkConnectModel?) : ApiResponse<OkDto?> {
        val localVariableConfig = pairingNetworkAddPostRequestConfig(networkConnectModel = networkConnectModel)

        return request<NetworkConnectModel, OkDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pairingNetworkAddPost
    *
    * @param networkConnectModel  (optional)
    * @return RequestConfig
    */
    fun pairingNetworkAddPostRequestConfig(networkConnectModel: NetworkConnectModel?) : RequestConfig<NetworkConnectModel> {
        val localVariableBody = networkConnectModel
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/Pairing/NetworkAdd",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return kotlin.collections.List<NetworkDiscoveryDto>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pairingNetworkDiscoveryGet() : kotlin.collections.List<NetworkDiscoveryDto> {
        val localVarResponse = pairingNetworkDiscoveryGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<NetworkDiscoveryDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<kotlin.collections.List<NetworkDiscoveryDto>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun pairingNetworkDiscoveryGetWithHttpInfo() : ApiResponse<kotlin.collections.List<NetworkDiscoveryDto>?> {
        val localVariableConfig = pairingNetworkDiscoveryGetRequestConfig()

        return request<Unit, kotlin.collections.List<NetworkDiscoveryDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pairingNetworkDiscoveryGet
    *
    * @return RequestConfig
    */
    fun pairingNetworkDiscoveryGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/Pairing/NetworkDiscovery",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return StatusDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pairingStatusGet() : StatusDto {
        val localVarResponse = pairingStatusGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StatusDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<StatusDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun pairingStatusGetWithHttpInfo() : ApiResponse<StatusDto?> {
        val localVariableConfig = pairingStatusGetRequestConfig()

        return request<Unit, StatusDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pairingStatusGet
    *
    * @return RequestConfig
    */
    fun pairingStatusGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/Pairing/Status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
