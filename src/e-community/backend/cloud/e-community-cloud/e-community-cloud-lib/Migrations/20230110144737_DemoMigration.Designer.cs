// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using e_community_cloud_lib.Database;

#nullable disable

namespace e_community_cloud_lib.Migrations
{
    [DbContext(typeof(ECommunityCloudContext))]
    [Migration("20230110144737_DemoMigration")]
    partial class DemoMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("e_community_cloud_lib.Database.Community.ECommunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistributionMode")
                        .HasColumnType("int");

                    b.Property<Guid?>("ECommunityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOfficial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LegalFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MemberDayBinding")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierPriceRateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ECommunityTypeId");

                    b.HasIndex("LegalFormId");

                    b.HasIndex("SupplierPriceRateId");

                    b.ToTable("ECommunity");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Community.ECommunityDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ECommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCalculating")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRelevant")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WasDistributed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ECommunityId");

                    b.ToTable("ECommunityDistribution");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Community.ECommunityMembership", b =>
                {
                    b.Property<Guid>("ECommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("DistributionPercentage")
                        .HasColumnType("float");

                    b.Property<int>("ECommunityPermission")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeftDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ECommunityId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("ECommunityMembership");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Community.ECommunityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DiscountHighRegional")
                        .HasColumnType("float");

                    b.Property<double>("DiscountLocal")
                        .HasColumnType("float");

                    b.Property<double>("DiscountLowRegional")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ECommunityType");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.LegalForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LegalForm");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("GridLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmailPublic")
                        .HasColumnType("bit");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LegalFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubstationId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplyMode")
                        .HasColumnType("int");

                    b.Property<int>("TransformerId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LegalFormId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.MemberFCMToken", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId", "Token");

                    b.ToTable("MemberFCMToken");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.Monitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsCalculating")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Monitoring");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.Translation", b =>
                {
                    b.Property<Guid>("EventCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventCaseId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Translation");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.BatterySystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CapacityAH")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SmartMeterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SmartMeterId");

                    b.ToTable("BatterySystem");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.EventCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EventCase");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.MeterDataMonitoring", b =>
                {
                    b.Property<int>("MonitoringId")
                        .HasColumnType("int");

                    b.Property<Guid>("SmartMeterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ActiveEnergyMinus")
                        .HasColumnType("int");

                    b.Property<int?>("ActiveEnergyPlus")
                        .HasColumnType("int");

                    b.Property<bool>("NonCompliance")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectedActiveEnergyMinus")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectedActiveEnergyPlus")
                        .HasColumnType("int");

                    b.HasKey("MonitoringId", "SmartMeterId");

                    b.HasIndex("SmartMeterId");

                    b.ToTable("MeterDataMonitoring");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.MeterDataProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActiveEnergyMinus")
                        .HasColumnType("int");

                    b.Property<int>("ActiveEnergyPlus")
                        .HasColumnType("int");

                    b.Property<int>("ActivePowerMinus")
                        .HasColumnType("int");

                    b.Property<int>("ActivePowerPlus")
                        .HasColumnType("int");

                    b.Property<Guid>("EventCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PrepaymentCounter")
                        .HasColumnType("int");

                    b.Property<int>("ReactiveEnergyMinus")
                        .HasColumnType("int");

                    b.Property<int>("ReactiveEnergyPlus")
                        .HasColumnType("int");

                    b.Property<int>("ReactivePowerMinus")
                        .HasColumnType("int");

                    b.Property<int>("ReactivePowerPlus")
                        .HasColumnType("int");

                    b.Property<Guid>("SmartMeterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<double>("WorkingPriceMinus")
                        .HasColumnType("float");

                    b.Property<double>("WorkingPricePlus")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EventCaseId");

                    b.HasIndex("SmartMeterId");

                    b.ToTable("MeterDataProfile");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.PVSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PeakWP")
                        .HasColumnType("float");

                    b.Property<Guid>("SmartMeterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SmartMeterId");

                    b.ToTable("PVSystem");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.SmartMeter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GridPriceRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDirectFeedIn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNonComplianceMuted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverflowFeedIn")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocalStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("MeasuresConsumption")
                        .HasColumnType("bit");

                    b.Property<bool>("MeasuresFeedIn")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierPriceRateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GridPriceRateId");

                    b.HasIndex("MemberId");

                    b.HasIndex("SupplierPriceRateId");

                    b.ToTable("SmartMeter");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.SmartMeterPortion", b =>
                {
                    b.Property<int>("ECommunityDistributionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SmartMeterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<int?>("ActualActiveEnergyMinus")
                        .HasColumnType("int");

                    b.Property<int?>("ActualActiveEnergyPlus")
                        .HasColumnType("int");

                    b.Property<int>("Deviation")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedActiveEnergyMinus")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedActiveEnergyPlus")
                        .HasColumnType("int");

                    b.Property<int>("Flexibility")
                        .HasColumnType("int");

                    b.Property<bool>("ForecastFromSmartMeter")
                        .HasColumnType("bit");

                    b.HasKey("ECommunityDistributionId", "SmartMeterId");

                    b.HasIndex("SmartMeterId");

                    b.ToTable("SmartMeterPortion");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.Charge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ApplyToECommunity")
                        .HasColumnType("bit");

                    b.Property<double>("BaseRate")
                        .HasColumnType("float");

                    b.Property<Guid?>("GridPriceRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TaxRate")
                        .HasColumnType("float");

                    b.Property<double>("WorkingPricePlus")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GridPriceRateId");

                    b.ToTable("Charge");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.GridPriceRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BaseRate")
                        .HasColumnType("float");

                    b.Property<int>("GridLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriceRateType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TaxRate")
                        .HasColumnType("float");

                    b.Property<double>("WorkingPricePlus")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("GridPriceRate");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.GridPriceRateCharge", b =>
                {
                    b.Property<Guid>("GridPriceRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChargeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GridPriceRateId", "ChargeId");

                    b.HasIndex("ChargeId");

                    b.ToTable("GridPriceRateCharge");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.SupplierPriceRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BaseRate")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerPeak")
                        .HasColumnType("float");

                    b.Property<int>("PriceRateType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TaxRate")
                        .HasColumnType("float");

                    b.Property<double>("WorkingPriceMinus")
                        .HasColumnType("float");

                    b.Property<double>("WorkingPricePlus")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("SupplierPriceRate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens", "dbo");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Community.ECommunity", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.Community.ECommunityType", "ECommunityType")
                        .WithMany("ECommunities")
                        .HasForeignKey("ECommunityTypeId");

                    b.HasOne("e_community_cloud_lib.Database.General.LegalForm", "LegalForm")
                        .WithMany("ECommunities")
                        .HasForeignKey("LegalFormId");

                    b.HasOne("e_community_cloud_lib.Database.PriceRate.SupplierPriceRate", "SupplierPriceRate")
                        .WithMany("ECommunities")
                        .HasForeignKey("SupplierPriceRateId");

                    b.Navigation("ECommunityType");

                    b.Navigation("LegalForm");

                    b.Navigation("SupplierPriceRate");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Community.ECommunityDistribution", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.Community.ECommunity", "ECommunity")
                        .WithMany("ECommunityDistributions")
                        .HasForeignKey("ECommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ECommunity");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Community.ECommunityMembership", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.Community.ECommunity", "ECommunity")
                        .WithMany("ECommunityMemberships")
                        .HasForeignKey("ECommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_community_cloud_lib.Database.General.Member", "Member")
                        .WithMany("ECommunityMemberships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ECommunity");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.Member", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.General.Language", "Language")
                        .WithMany("Members")
                        .HasForeignKey("LanguageId")
                        .IsRequired();

                    b.HasOne("e_community_cloud_lib.Database.General.LegalForm", "LegalForm")
                        .WithMany("Members")
                        .HasForeignKey("LegalFormId");

                    b.Navigation("Language");

                    b.Navigation("LegalForm");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.MemberFCMToken", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.General.Member", "Member")
                        .WithMany("MemberFCMTokens")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.Translation", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.Local.EventCase", "EventCase")
                        .WithMany("Translation")
                        .HasForeignKey("EventCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_community_cloud_lib.Database.General.Language", "Language")
                        .WithMany("Translations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventCase");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.BatterySystem", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.Local.SmartMeter", "SmartMeter")
                        .WithMany("BatterySystems")
                        .HasForeignKey("SmartMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartMeter");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.MeterDataMonitoring", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.General.Monitoring", "Monitoring")
                        .WithMany("MeterDataMonitorings")
                        .HasForeignKey("MonitoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_community_cloud_lib.Database.Local.SmartMeter", "SmartMeter")
                        .WithMany("MeterDataMonitorings")
                        .HasForeignKey("SmartMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monitoring");

                    b.Navigation("SmartMeter");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.MeterDataProfile", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.Local.EventCase", "EventCase")
                        .WithMany("MeterDataProfiles")
                        .HasForeignKey("EventCaseId")
                        .IsRequired();

                    b.HasOne("e_community_cloud_lib.Database.Local.SmartMeter", "SmartMeter")
                        .WithMany("MeterDataProfiles")
                        .HasForeignKey("SmartMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventCase");

                    b.Navigation("SmartMeter");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.PVSystem", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.Local.SmartMeter", "SmartMeter")
                        .WithMany("PVSystems")
                        .HasForeignKey("SmartMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmartMeter");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.SmartMeter", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.PriceRate.GridPriceRate", "GridPriceRate")
                        .WithMany("SmartMeters")
                        .HasForeignKey("GridPriceRateId");

                    b.HasOne("e_community_cloud_lib.Database.General.Member", "Member")
                        .WithMany("SmartMeters")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_community_cloud_lib.Database.PriceRate.SupplierPriceRate", "SupplierPriceRate")
                        .WithMany("SmartMeters")
                        .HasForeignKey("SupplierPriceRateId");

                    b.Navigation("GridPriceRate");

                    b.Navigation("Member");

                    b.Navigation("SupplierPriceRate");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.SmartMeterPortion", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.Community.ECommunityDistribution", "ECommunityDistribution")
                        .WithMany("SmartMeterPortions")
                        .HasForeignKey("ECommunityDistributionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_community_cloud_lib.Database.Local.SmartMeter", "SmartMeter")
                        .WithMany("SmartMeterPortions")
                        .HasForeignKey("SmartMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ECommunityDistribution");

                    b.Navigation("SmartMeter");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.Charge", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.PriceRate.GridPriceRate", null)
                        .WithMany("Charges")
                        .HasForeignKey("GridPriceRateId");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.GridPriceRate", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.PriceRate.Provider", "Provider")
                        .WithMany("GridPriceRates")
                        .HasForeignKey("ProviderId")
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.GridPriceRateCharge", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.PriceRate.Charge", "Charge")
                        .WithMany("GridPriceRateCharges")
                        .HasForeignKey("ChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_community_cloud_lib.Database.PriceRate.GridPriceRate", "GridPriceRate")
                        .WithMany()
                        .HasForeignKey("GridPriceRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charge");

                    b.Navigation("GridPriceRate");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.SupplierPriceRate", b =>
                {
                    b.HasOne("e_community_cloud_lib.Database.PriceRate.Provider", "Provider")
                        .WithMany("SupplierPriceRates")
                        .HasForeignKey("ProviderId")
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Community.ECommunity", b =>
                {
                    b.Navigation("ECommunityDistributions");

                    b.Navigation("ECommunityMemberships");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Community.ECommunityDistribution", b =>
                {
                    b.Navigation("SmartMeterPortions");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Community.ECommunityType", b =>
                {
                    b.Navigation("ECommunities");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.Language", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.LegalForm", b =>
                {
                    b.Navigation("ECommunities");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.Member", b =>
                {
                    b.Navigation("ECommunityMemberships");

                    b.Navigation("MemberFCMTokens");

                    b.Navigation("SmartMeters");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.General.Monitoring", b =>
                {
                    b.Navigation("MeterDataMonitorings");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.EventCase", b =>
                {
                    b.Navigation("MeterDataProfiles");

                    b.Navigation("Translation");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.Local.SmartMeter", b =>
                {
                    b.Navigation("BatterySystems");

                    b.Navigation("MeterDataMonitorings");

                    b.Navigation("MeterDataProfiles");

                    b.Navigation("PVSystems");

                    b.Navigation("SmartMeterPortions");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.Charge", b =>
                {
                    b.Navigation("GridPriceRateCharges");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.GridPriceRate", b =>
                {
                    b.Navigation("Charges");

                    b.Navigation("SmartMeters");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.Provider", b =>
                {
                    b.Navigation("GridPriceRates");

                    b.Navigation("SupplierPriceRates");
                });

            modelBuilder.Entity("e_community_cloud_lib.Database.PriceRate.SupplierPriceRate", b =>
                {
                    b.Navigation("ECommunities");

                    b.Navigation("SmartMeters");
                });
#pragma warning restore 612, 618
        }
    }
}
