// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using e_community_local_lib.Database;

#nullable disable

namespace e_community_local_lib.Migrations
{
    [DbContext(typeof(ECommunityLocalContext))]
    [Migration("20220425134906_RemovedECommunity")]
    partial class RemovedECommunity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("e_community_local_lib.Database.General.BatterySystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("CapacityAH")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("BatterySystem");
                });

            modelBuilder.Entity("e_community_local_lib.Database.General.Credential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Credential");
                });

            modelBuilder.Entity("e_community_local_lib.Database.General.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CityName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("GridLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StreetNr")
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplyMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ZipCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("e_community_local_lib.Database.General.PVSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("PeakWP")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("PVSystem");
                });

            modelBuilder.Entity("e_community_local_lib.Database.General.SmartMeter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AESKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("APIKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirectFeedIn")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOverflowFeedIn")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MeasuresConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MeasuresFeedIn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SmartMeter");
                });

            modelBuilder.Entity("e_community_local_lib.Database.Meter.EventCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EventCase");
                });

            modelBuilder.Entity("e_community_local_lib.Database.Meter.MeterDataHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveEnergyMinus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveEnergyPlus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivePowerMinus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivePowerPlus")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Cloudiness")
                        .HasColumnType("REAL");

                    b.Property<Guid>("EventCaseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PrepaymentCounter")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RainVolume")
                        .HasColumnType("REAL");

                    b.Property<int>("ReactiveEnergyMinus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactiveEnergyPlus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactivePowerMinus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactivePowerPlus")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SnowVolume")
                        .HasColumnType("REAL");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("Visability")
                        .HasColumnType("REAL");

                    b.Property<double>("WorkingPriceMinus")
                        .HasColumnType("REAL");

                    b.Property<double>("WorkingPricePlus")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("EventCaseId");

                    b.ToTable("MeterDataHistory");
                });

            modelBuilder.Entity("e_community_local_lib.Database.Meter.MeterDataProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveEnergyMinus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveEnergyPlus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivePowerMinus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivePowerPlus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrepaymentCounter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactiveEnergyMinus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactiveEnergyPlus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactivePowerMinus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactivePowerPlus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("WorkingPriceMinus")
                        .HasColumnType("REAL");

                    b.Property<double>("WorkingPricePlus")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("MeterDataProfile");
                });

            modelBuilder.Entity("e_community_local_lib.Database.Meter.MeterDataRealTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveEnergyMinus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveEnergyPlus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivePowerMinus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivePowerPlus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrepaymentCounter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactiveEnergyMinus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactiveEnergyPlus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactivePowerMinus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactivePowerPlus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MeterDataRealTime");
                });

            modelBuilder.Entity("e_community_local_lib.Database.PriceRate.Charge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ApplyToECommunity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("BaseRate")
                        .HasColumnType("REAL");

                    b.Property<double>("TaxRate")
                        .HasColumnType("REAL");

                    b.Property<double>("WorkingPricePlus")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Charge");
                });

            modelBuilder.Entity("e_community_local_lib.Database.PriceRate.GridPriceRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("BaseRate")
                        .HasColumnType("REAL");

                    b.Property<int>("GridLevel")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TaxRate")
                        .HasColumnType("REAL");

                    b.Property<double>("WorkingPricePlus")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("GridPriceRate");
                });

            modelBuilder.Entity("e_community_local_lib.Database.PriceRate.SupplierPriceRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("BaseRate")
                        .HasColumnType("REAL");

                    b.Property<double>("PricePerPeak")
                        .HasColumnType("REAL");

                    b.Property<double>("TaxRate")
                        .HasColumnType("REAL");

                    b.Property<double>("WorkingPriceMinus")
                        .HasColumnType("REAL");

                    b.Property<double>("WorkingPricePlus")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SupplierPriceRate");
                });

            modelBuilder.Entity("e_community_local_lib.Database.Meter.MeterDataHistory", b =>
                {
                    b.HasOne("e_community_local_lib.Database.Meter.EventCase", "EventCase")
                        .WithMany("MeterDataHistories")
                        .HasForeignKey("EventCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventCase");
                });

            modelBuilder.Entity("e_community_local_lib.Database.Meter.EventCase", b =>
                {
                    b.Navigation("MeterDataHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
